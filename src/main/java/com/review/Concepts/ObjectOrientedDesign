
Object Modeling / Unified modeling language (notation to design system) / Helps to explain the classes, interfaces and how they all work together
Step1: List requirements and Goals of the system
Step2: List actors, top use cases and draw use case diagram with relationship (includes and excludes)
Step3: Draw class diagram
Step4: Draw sequence diagram


Modeling diagram:
1. Inheritance: Is-A relationship (arrow with empty triangle)
(Abstract write in italics)
Every circle is a shape. empty arrowhead.

class Shape {
    Point Position;
}

class Circle extends Shape {
    double radius;  // can have its own attributes
}



2. Association (generic relationship). Straight line between the two classes
class one contains another class.

class Invoice {
    List<Item> items;
}

class Item { }



3. Multiplicity (how many object participate in this relation ship)
1  *
0..1  2
1..*  *
1     1..*
1     3..6


Examples:
Question 1      Answer *
Marriage 0..1   Person  2
Class    1..*   Student *
Book     1      Page    1..*
Table    1      Legs    3..6   (note this)


3. Aggregation and Composition (Is-Part-Of): filled diamond or empty diamond.
Aggregation (empty diamond - the two objects have life time of its own): Wheel is owned by car. Wheel has a lifecycle of its own. empty diamond.
Composition (filled diamond - life time tied together): Room is owned by house. Room is owned by house. Room is destroyed with house. filled diamond.

Other Examples:
Relationship between Vehicle and Ship (Ship is a Vehicle) - inheritance - is a relationship - empty arrow
Relationship between Book and Title (Book has a title - the class box of book should have title) - Has a relationship - association
Relationship between Question and Answer (Questions has an Answer)

How to remember:
via relationship: Is-A, Is-Part-Of, for multiplicity (cover hand and think how many)

---------------------------------

Design Patterns: Elements of Reusable Object Oriented Software:

Elements of Reusable Object Oriented Software - Eric Gamma

Creational Pattern
Structural Pattern
Behavioral Pattern

    Composite pattern
    Decorator Pattern
    Facade Pattern
    visitor pattern
    FlyWeight Pattern
    Observer pattern
    Strategy Pattern
    State Pattern




=========
Restful API Design Video

HTTP calls:
    - URL
    - HTTP Verb (GET, POST, DELETE, PUT, ...)
    - Request / Reply

https://someservice.org/some/path
=> shorten to just: /some/path

CRUD Create (POST), Read (GET), Update (PUT), Delete (DELETE)

Reply Status Codes
200 OK
201 Created
204 No Content
304 Not Modified
400 Bad Request
401 Not Authorized (may be we need session token)
404 Not Found
500 Internal Server Error


User Service:

>>> Create a User
POST /users
request:
{
    "userName": "hanna",
    userStatus: "gold"
}

response:
{
    "userId": 17,
    "userName": "hanna",
    userStatus: "gold"
}


>>> Get all Users
GET /users
request:

response:
[
   {
       "userId": 17,
       "userName": "hanna",
       userStatus: "gold"
   },
   {
       "userId": 17,
       "userName": "ela",
       userStatus: "silver"
   }
]

>>> Get a users that match filter
GET /users?userStatus=gold
request: -
response:
[
   {
       "userId": 17,
       "userName": "hanna",
       userStatus: "gold"
   }
]


>>> Get a user with a given ID
GET /users/{userId}
request: -
response:
    [
       {
           "userId": 17,
           "userName": "hanna",
           userStatus: "gold"
       }
    ]


>>> Update a user
PUT /user/{userId}
    request:
        { userStatus: "silver" }

    response:
        { userId: 1, userName: "alice", userStatus: "silver" }

>>> Delete a user
DELETE /user/{userId}
    request: -
    response: 204


=> Reply
    - Just status code
    - or status code + payload (depending on the http)

=========================

Friends:
POST /users/{userId}/friends
GET /users/{userId}/friends
GET /users/{userId}/friends/{friendId}
    /friends/{friendId}
PUT
    /users/{userId}/friend/{friendId}
    /friend/{friendId}
DELETE
    /users/{userId}/friend/{friendId}
    /friend/{friendId}
===============================
JSON:
Numbers: 123
Boolean Value: true/false
Null: null
Strings: "abc"
objects: {"attribute1": "value", "attribute2": 123, "attribute3": {"A": 1, "B": 2} }
Arrays: [123, 456, 356]

Some questions: On restful APIs
1. Architectural paradigm
2. how to version APIs (include version in the path or another approach using request header to tell server what version we want). Wrong answer may not be good for you.

========

SOLID Principles
Single responsibility principle - separation of concern
    Every module should do exactly one thing
        - method/function
        - classs
        - Package / namespace
Open/close principle
    Software entities should be open for extension and closed for modification
Liskov substitution principleBuck
    If S is a subclass of T, then objects of class T may be replaced with objects of class S.
    Let P be a property of objects of class T. Then object of class S must also have this property.

        Covariant return type
        Contravariant argument types
        No new exceptions
        Precondition cannot be strengthened
        Postconditions cannot be weekened
        Invariants must be preserved
Interface segregation principle
    A client should not be forced use an interface with methods it doesn't need
    CQRS
    reactive programming
Dependency inversion principle
    High level modules should not depend on low level modules
    Both abstract and concrete modules should only depend on abstract modules.

===
Draw an object graph







--------------------------------------------------------------------------------
Interview question - go daddy
/* Write the BO interfaces for customer card processingWrite the BO interfaces for customer card processing
 *                                                                  | <-> Acquirer1
 *   Trusted Client -> Customer Card -> GD Clound -> Payment BO ->  | <-> Acquirer2
 *                                                                  | <-> Acquirer3
 *
 */


public enum PaymentStatus {
    SUCCESS,
    FAILED,
    INSUFFICENTFUND
}

public enum CardType {
    CREDIT,
    DEBIT
}

public enum PaymentProcessing {
    CAPTURE,
    REFUND
}


public class Card {
    String cardNumber;
    String ExpiryDate;
    String SecutiryCode;
}

public interface POS {
    public boolen processCard();
}

public class PointOfSale implements POS {
    String TerminalIdentification;
    public boolen processCard(Card cardDetails, String TerminalIdentification) {
        // process the card
    }
}

public interface PaymentBO {
    public validateTerminal();
    public boolean ProcessPayment(Terminal terminalInfo, CardInfo card);
}


public class AcquierFactory {
    Acquier acquierer;

    Acquier getAcquirer(RequestVO request) {
        if (terminalInfo == "POS1" && cardInfo == "Visa" && geo = "India") {
            acquierer = new Acquirer1(terminalInfor, cardInfo);
        } else if (terminalInfo == "POS1" && cardInfo == "MasterCard") {
            acquierer = new Acquirer2(terminalInfor, cardInfo);
        } else if (terminalInfo == "POS1" && cardInfo == "Amex") {
            acquierer = new Acquirer3(terminalInfor, cardInfo);
        } else {
            throw new AcquirerNotFoundException;
        }
        return acquierer;
    }
}

public class PaymentBusiness implements PaymentBO {
    Acquier acquirer;
    @AutoWire
    AcquierFactory acquirerFactory;

    PaymentBusiness() {
    }

    public handlePaymentProcessingRequest(RequestVO request) {
        getAcquier(request);
        ProcessPayment();
        return responseVO;
    }

    public void getAcquier(RequestVO request) {
        try {
            acquirer = acquirerFactory.getAcquirer(request);
        } catch (AcquirerNotFoundException e)  {
            // handle exception
        }
    }
    public ResponseVO ProcessPayment(Terminal terminalInfo, CardInfo card) {
        try {
            acquirer.procesPayment();
        }

    }

    public boolean validateTerminal() {
        //DB calls to check if the terminal is registerd and valid
    }
    public boolean ProcessPayment() {
        acquirer.processPayment(PaymentInfo);
    }

}


public abstract class Acquirer {
    String acquirerName;
    String acquirerAddress;

    abstract String validateCArd(Card cardDetail);
    abstract String processPayment(Card cardDetail);
}

public class Acquirer1 extends Acquirer {
    String processPayment() {
        // validate and process the card based on the card deatils and payment info
    }
}

public class Acquirer2 extends Acquirer {
    String processPayment(Card cardDetail, PaymentInfo payment) {
        // validate and process the card based on the card deatils and payment info
    }
}
public class Acquirer3 extends Acquirer {
    String processPayment(Card cardDetail, PaymentInfo payment) {
        // validate and process the card based on the card deatils and payment info
    }
}

public class Acquirer4 extends Acquirer {
    String processPayment(Card cardDetail, PaymentInfo payment) {
        // validate and process the card based on the card deatils and payment info
    }
}








